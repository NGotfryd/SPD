#include<iostream>
#include<string>
#include<fstream>
#include<cstdlib>
#include<iomanip>		
#include<algorithm>
#include<vector>

using namespace std;

struct zadanie
{
	int nr;
	int r;
	int p;
	int q;
};


/*istream& operator >> (istream& in, zadanie& zadanie)
{
	in >> zadanie.nr >> zadanie.r >> zadanie.p >> zadanie.q;
	return in;
};
*/

ostream& operator << (ostream& out, zadanie& zadanie)
{
	cout << zadanie.nr << ": " << zadanie.r << " " << zadanie.p << " " << zadanie.q << endl;
	return out;
};


int main(int argc, char **argv)
{
	string fileName;
	fstream file;
	int n;
	int t = 0;
	vector<zadanie> N;
	vector<zadanie> G;
	zadanie buff;	
	
	fileName = argv[1];
	
/********WCZYTANIE DANYCH Z PLIKU************/

	file.open(fileName, std::ios::in);
	if(file.good() == true)
	{
		file >> n;
		int *C = new int [n];		

		int buff;
		for(int i = 0; i < n; i++)
		{
			N.push_back(zadanie());
			N[i].nr = i+1;
			file >> buff;
			N[i].r = buff;
			file >> buff;
			N[i].p = buff;
			file >> buff;
			N[i].q = buff;
		}	
		
	}	





//
//		zadanie *N = new zadanie[n];
//		zadanie *G = new zadanie[n];
//		for(int i = 0; i < n; i++)
//		{	
//			N[i].nr = i+1;
//			file >> N[i].r;
//			file >> N[i].p;
//			file >> N[i].q;
//
//		}
		file.close();
	

		for(int i = 0; i < N.size(); i++)
		{
			for(int j = 1; j < N.size(); j++)
			{
				if(N[j -1].r > N[j].r)
				{
					swap(N[j-1], N[j]);
				}
			}
		}



		cout << n << endl;
	for(int i = 0; i < N.size(); i++)
		{
			cout << N[i];
		}

		

/**************ALGORYTM*****************/

	while(!N.empty() || G.empty())
	{
		while(!N.empty() || N[0].r <= t)
		{	
			N.front() = buff;
			G.push_back(buff);
			N.erase(N.begin());
		}
	}




/*



		cout << n << endl;
		
		for(int i = 0; i < n; i++)
		{
			cout << N[i].nr << ": ";
			cout << N[i].r << " ";
			cout << N[i].p << " ";
			cout << N[i].q << endl;
		}
*/
		//delete[] C;
		return 0;
	
}

